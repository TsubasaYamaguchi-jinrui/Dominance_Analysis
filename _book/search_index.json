[["index.html", "Dominance Analysis Using R 本稿の目的", " Dominance Analysis Using R yamaguchi 2022-10-31 本稿の目的 本稿では、順位に関する様々な指標をRを用いて算出するデモを行う。 主に扱う内容は以下のとおりである。 David’s Scoreの算出 steepnessの算出 linearity(h’)の算出 Elo-rating scoreの算出 "],["パッケージの読み込み.html", "0. パッケージの読み込み", " 0. パッケージの読み込み steepnessパッケージ(Leiva and De Vries 2014)とcompeteパッケージ(Curley 2016)を用いる。 それぞれの関数の使い方は以下のサイトを参照。 steepness compete library(steepness) library(compete) library(tidyverse) library(easystats) References "],["davids-scoreの算出.html", "1. David’s Scoreの算出", " 1. David’s Scoreの算出 David’s Score(以下、DS)は、個体間の相対的なdominanceの差の違いを考慮して順位を算出してくれる指標である。 一般的には個体の順位を高い方から順に1位, 2位, 3位, …と等間隔に割り振っていくため、1位 vs 2位と2位 vs 3位の間のdominanceの差が同じとみなされる。 一方で、DSはその値の差が大きい個体間ほど、dominanceに差があることを表すことができる。 例えば、A, B, Cという個体のDSがそれぞれ2, 4, 7とすると、AとBの間のdominanceの差はBとCの差よりも小さいことになる。 なお、DSは値が高い個体ほど順位が高いことを表す。 それでは算出を行う。 算出には、個体間の勝敗を記録したマトリックスを用いる。 本稿では、(Vervaecke et al. 2007)に載っている馬の攻撃交渉の勝敗データを用いる。 データはdata frameではなく、matrixとして読み込む必要があるので、csvファイルなどから読み込むときは必要に応じてas.matrix()でmatrix化する必要がある。 Rで直接マトリックスを作成する場合 mat &lt;- matrix(c(0,58,50,61,32,37,29,39,25,8,0,22,22,9,27,20,10,48, 3,3,0,19,29,12,13,19,8,5,8,9,0,33,38,35,32,57, 4,7,9,1,0,28,26,16,23,4,3,0,0,6,0,7,6,12, 2,0,4,1,4,4,0,5,3,0,2,1,1,5,8,3,0,10,3,1,3,0,0,4,1,2,0), nrow=9,byrow=TRUE) individuals &lt;- c(&quot;V&quot;,&quot;VS&quot;,&quot;B&quot;,&quot;FJ&quot;,&quot;PR&quot;,&quot;VB&quot;,&quot;TOR&quot;,&quot;MU&quot;,&quot;ZV&quot;) %&gt;% as.character() ##列名と行名を追加 colnames(mat) &lt;- individuals rownames(mat) &lt;- individuals mat ## V VS B FJ PR VB TOR MU ZV ## V 0 58 50 61 32 37 29 39 25 ## VS 8 0 22 22 9 27 20 10 48 ## B 3 3 0 19 29 12 13 19 8 ## FJ 5 8 9 0 33 38 35 32 57 ## PR 4 7 9 1 0 28 26 16 23 ## VB 4 3 0 0 6 0 7 6 12 ## TOR 2 0 4 1 4 4 0 5 3 ## MU 0 2 1 1 5 8 3 0 10 ## ZV 3 1 3 0 0 4 1 2 0 csvファイルから読みこむ場合 mat2 &lt;- read_csv(&quot;matrix.csv&quot;) %&gt;% ## 1列目を削除 select(-1) %&gt;% ## matrix形式に変換 as.matrix() ## 行名を追加 rownames(mat2) &lt;- colnames(mat2) DSを算出する際には、steepnessを算出する際にその値が0から1におさまるように標準化することが多い。 これをNormalized David’s Score(以下、nDS)という(De Vries et al. 2006)。 算出する際には、個体間の勝率(\\(P_ij\\))を用いる方法と、勝率を試行数（何回敵対的交渉があったか）で補正した値(\\(D_ij\\))を用いる場合がある(De Vries et al. 2006)。 de Vries et al. (2006)では後者が推奨されているようだが、十分に試行数がある場合には前者の方がいいと書いてある論文もあるようだ(Balasubramaniam et al. 2012)。 それでは、それぞれ算出する。 微妙に値が異なることが分かる。 Pijを用いた場合 ## NormDS ## V 7.366095 ## VS 6.009971 ## B 5.060312 ## FJ 5.576360 ## PR 4.266966 ## VB 2.188967 ## TOR 2.199558 ## MU 2.264827 ## ZV 1.066945 Dijを用いた場合 ## NormDS ## V 7.286151 ## VS 5.917860 ## B 4.976697 ## FJ 5.534913 ## PR 4.247536 ## VB 2.250670 ## TOR 2.223747 ## MU 2.333602 ## ZV 1.228824 以下では、\\(D_ij\\)で算出した値を用いる。 References "],["steepnessの算出.html", "2. steepnessの算出", " 2. steepnessの算出 続いて、順位序列のsteepnessを算出する。 steepnessは順位序列の厳しさを表し、例えば専制的な種ほどその値は高くなるとされる(Balasubramaniam et al. 2012)。 X軸に順位が高い個体から名前を並べ、Y軸にnDSをプロットするとき、その回帰直線の傾きがsteepnessとなる。 0から1の値を取り、1に近づくほどsteepnessが高いことを示す。 それでは、steepness(=傾き)はいくつになるだろうか。 単回帰分析を行ってやると、その値は約0.7421となることがわかる。 ## NDSが高い順に並べ替え nDS_d %&gt;% data.frame() %&gt;% arrange(-NormDS) %&gt;% mutate(x = 1:n()) -&gt; nDS_d2 ## 単回帰分析 r &lt;- lm(data=nDS_d2, NormDS~x) ## 単回帰分析の結果 r$coefficients[[2]] ## [1] -0.7420538 steepnessパッケージでは、わざわざ単回帰を行わなくてもsteepnessを算出することができる。 stp &lt;- steepness::steeptest(mat, names = individuals, rep = 1000, method = &quot;Dij&quot;, order = TRUE) stp$Stp ## [1] 0.7420538 個体の勝敗がランダムに決まるときに比べて、steepnessが有意に高いかを検定することもできる。 結果、steepnessはランダムな場合よりも有意に高いことが分かる。 summary(stp) ## ## RESULTS OF STEEPNESS ANALYSIS OF THE MATRIX OF DYADIC DOMINANCES CORRECTED FOR CHANCE ## ===================================================================================== ## ## ## Dij ## === ## ## V VS FJ B PR MU VB TOR ZV ## V 0.00000 0.87313 0.93519 0.917910 0.87838 0.8929 0.9219 0.9875 0.8793 ## VS 0.12687 0.00000 0.86538 0.725806 0.55882 0.8871 0.9762 0.8077 0.9700 ## FJ 0.06481 0.13462 0.00000 0.672414 0.75641 0.9615 0.7500 0.9286 0.7083 ## B 0.08209 0.27419 0.32759 0.000000 0.95714 0.9872 0.9595 0.9559 0.9914 ## PR 0.12162 0.44118 0.24359 0.042857 0.00000 0.8143 0.8548 0.7500 0.9792 ## MU 0.10714 0.11290 0.03846 0.012821 0.18571 0.0000 0.6250 0.4333 0.7353 ## VB 0.07812 0.02381 0.25000 0.040541 0.14516 0.3750 0.0000 0.6111 0.7000 ## TOR 0.01250 0.19231 0.07143 0.044118 0.25000 0.5667 0.3889 0.0000 0.8077 ## ZV 0.12069 0.03000 0.29167 0.008621 0.02083 0.2647 0.3000 0.1923 0.0000 ## ## ## DAVID&#39;S SCORES ## ============== ## ## DS Values ## V 29.575 ## VS 17.261 ## FJ 13.814 ## B 8.790 ## PR 2.228 ## MU -14.998 ## VB -15.744 ## TOR -15.986 ## ZV -24.941 ## ## ## NORMALIZED DAVID&#39;S SCORES ## ========================= ## ## NormDS Values ## V 7.286 ## VS 5.918 ## FJ 5.535 ## B 4.977 ## PR 4.248 ## MU 2.334 ## VB 2.251 ## TOR 2.224 ## ZV 1.229 ## ## ## STEEPNESS ## ========= ## ## Slope (absolute) = 0.7421 ## ## ## INTERCEPT ## ========= ## ## Intercept = 7.71 ## ## ## ## SUMMARY STATISTICS OF THE RANDOMIZATION PROCEDURE FOR TESTING STEEPNESS BASED ON THE Dij MEASURES ## ================================================================================================= ## Stp ## Empirical value 0.742 ## Right p-value 0.001 ## Left p-value 1.000 ## N simulations 1000.000 ## Mean 0.298 ## Variance 0.005 ## Minimum 0.116 ## 25th Pctl 0.249 ## 50th Pctl 0.294 ## 75th Pctl 0.346 ## Maximum 0.500 References "],["linearityの算出.html", "3. linearityの算出", " 3. linearityの算出 Linearityは順位序列がどの程度直線的かを示す指標である。 直線的とは、順位序列に逆転や三すくみのような関係がないことを指す。 linearityの指標としては\\(h&#39;\\)がよく用いられる(De Vries 1995)。 competeパッケージを用いて以下のように算出することができる。 lin &lt;- devries(mat, Nperms = 10000) lin$`h-modified` ## [1] 0.9667 \\(h&#39;\\)は0.9667なので、順位序列の直線性はかなり高いことが分かる。 個体の勝敗がランダムに割り振られたときと比較して\\(h&#39;\\)が有意に高いかも検定することができる。 今回は、有意に高いことが示された。 lin$`p-value` ## [1] 0 References "],["elorating-packageを用いた方法.html", "4. Elorating packageを用いた方法 4.1 David’s Scoreとsteepness 4.2 linearity 4.3 おまけ(Elo-ratingの計算) 4.4 おまけ(その他)", " 4. Elorating packageを用いた方法 なお、以上で算出した指標はEloRatingパッケージ(Neumann 2011)でも求めることができる。個人的にはデータフレームとして出力してくれるので、こちらの方が使いやすい。 詳細はこちら library(EloRating) 4.1 David’s Scoreとsteepness 算出する際、行列の名前が入っていなければいけないよう。 Davis’s Score prop=で”Dij”か”Pij”を指定。 EloRating::DS(mat, prop = &quot;Dij&quot;) ## ID DS normDS ## 1 V 29.575 7.286 ## 2 VS 17.261 5.918 ## 3 FJ 13.814 5.535 ## 4 B 8.790 4.977 ## 5 PR 2.228 4.248 ## 6 MU -14.998 2.334 ## 7 VB -15.744 2.251 ## 8 TOR -15.986 2.224 ## 9 ZV -24.941 1.229 steepness EloRating::steepness(mat, nrand = 10000) ## steep expected p nrand ## 0.7421 0.3024 0.0001 10000.0000 同様の結果を得られた。 4.2 linearity \\(h&#39;\\)は以下のように求められる。 同様の結果が得られた。 EloRating::h.index(mat, loop = 1000) ## variable value ## 1 N 9.0000 ## 2 h index 0.9667 ## 3 h&#39; index 0.9667 ## 4 expected h 0.2969 ## 5 p right 0.0010 ## 6 randomizations 1000.0000 ## 7 tied 0.0000 ## 8 unknown 0.0000 \\(h&#39;\\)に変わる指標として、transitivityという指標も提案されている(Shizuka and McDonald 2012)。 EloRating::transitivity(mat, runs = 1000) ## Pt ttri p runs ## 0.988 0.952 0.000 1000.000 4.3 おまけ(Elo-ratingの計算) EloRatingパッケージでは、他にも順位序列に関する様々な指標が求められるよう（例えば、時間的な順位の変化を考慮するElo-ratingなど。詳細はこちら）。 例えば、Elo-ratingは以下のような日付と勝敗が示されたデータをもちいて算出できる。 data(adv) head(adv) ## Date Time winner loser ## 1 2010-01-01 15:38:13 b c ## 2 2010-01-02 16:07:30 c g ## 3 2010-01-03 10:26:45 c d ## 4 2010-01-04 15:44:58 c d ## 5 2010-01-05 14:26:55 b e ## 6 2010-01-06 17:31:02 d f Elo-ratingの計算。 res &lt;- elo.seq(winner = adv$winner, loser = adv$loser, Date = adv$Date) summary(res) ## Elo ratings from 7 individuals ## total (mean/median) number of interactions: 33 (9.4/9) ## range of interactions: 7 - 11 ## date range: 2010-01-01 - 2010-02-02 ## startvalue: 1000 ## uppon arrival treatment: average ## k: 100 ## proportion of draws in the data set: 0 ある日付におけるElo-ratingは以下のように求められる。 extract_elo(res, extractdate = &quot;2010-01-28&quot;) %&gt;% data.frame() %&gt;% rename(&quot;Elo-rating&quot; = &quot;.&quot;) %&gt;% rownames_to_column(var = &quot;ID&quot;) ## ID Elo-rating ## 1 c 1207 ## 2 b 1137 ## 3 d 1095 ## 4 f 1004 ## 5 e 936 ## 6 g 878 ## 7 a 743 日付を指定しなければ最終日のElo-ratingが求められる。 extract_elo(res) %&gt;% data.frame() %&gt;% rename(&quot;Elo-rating&quot; = &quot;.&quot;) %&gt;% rownames_to_column(var = &quot;ID&quot;) ## ID Elo-rating ## 1 b 1203 ## 2 c 1148 ## 3 d 1116 ## 4 f 1004 ## 5 e 982 ## 6 g 843 ## 7 a 704 Elo-ratingの時系列的変化は以下のように描画できる。 eloplot(res) 4.4 おまけ(その他) EloRaingパッケージでは、様々な論文で用いられている勝敗マトリクスのデータも豊富に取り込める。 de Vries et al. (2006)のボノボのデータ。 data(bonobos) bonobos ## He Dz Ho De Ko Re Ki ## He 0 0 1 2 10 63 8 ## Dz 0 0 2 3 0 88 4 ## Ho 0 0 0 4 65 84 3 ## De 0 0 0 0 0 80 10 ## Ko 0 0 0 0 0 4 1 ## Re 0 1 5 0 10 0 6 ## Ki 0 0 0 0 0 2 0 nDSとsteepnessの算出。 DS(bonobos,prop = &quot;Dij&quot;) ## ID DS normDS ## 1 He 10.9875 4.570 ## 2 Dz 9.6891 4.384 ## 3 Ho 7.3927 4.056 ## 4 De 0.8606 3.123 ## 5 Ko -7.2559 1.963 ## 6 Re -8.8494 1.736 ## 7 Ki -12.8245 1.168 steepness(bonobos,Dij=TRUE, nrand = 10000) ## steep expected p nrand ## 0.6284 0.2686 0.0001 10000.0000 de Vries (1998)のデータ。 data(devries98) devries98 ## a v b h g w e k c y ## a 0 5 4 6 3 0 2 2 3 1 ## v 0 0 0 0 2 1 2 0 7 7 ## b 0 0 0 0 1 1 1 2 2 2 ## h 0 3 0 0 0 0 6 0 2 5 ## g 0 0 0 1 0 2 4 0 3 0 ## w 2 0 0 3 0 0 0 0 2 1 ## e 0 0 0 0 0 0 0 0 0 4 ## k 0 0 0 0 0 0 0 0 2 1 ## c 0 0 0 0 0 1 0 2 0 6 ## y 0 0 0 0 0 0 0 0 2 0 \\(h&#39;\\)とtransitivityの算出。 h.index(devries98, loop = 10000) ## variable value ## 1 N 10.0000 ## 2 h index 0.5818 ## 3 h&#39; index 0.6424 ## 4 expected h 0.2737 ## 5 p right 0.0113 ## 6 randomizations 10000.0000 ## 7 tied 1.0000 ## 8 unknown 10.0000 transitivity(devries98, runs = 10000) ## Pt ttri p runs ## 0.907 0.630 0.010 10000.000 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
